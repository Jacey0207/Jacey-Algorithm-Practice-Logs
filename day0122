# Day1
  
## 数组理论基础
  >1.数组是存放在连续内存空间上的相同类型数据的集合。
  >2.数组下标都是从0开始的。
  >3.数组内存空间的地址是连续的。正是因为数组在内存空间的地址是连续的，所以我们在删除或者增添元素的时候，就难免要移动其他元素的地址。
  >4.数组的元素是不能删的，只能覆盖。
  
## 704.二分查找
- 方法1：左闭右闭区间
```Python
def lower_bound(nums: List[int], target: int) -> int:
        left = 0
        right = len(nums) - 1   # 闭区间 [left, right]
        while left <= right:    # 当数组不为空的时候
            # 循环不变量：
            # nums[left-1] < target
            # nums[right+1] >= target
            mid = (left + right) // 2
            if nums[mid] < target:      # 此时target在右区间
                left = mid + 1
            else:       # target在左区间
                right = mid - 1
        return left

class Solution:
    def search(self, nums: List[int], target: int) -> int:
        i = lower_bound(nums, target)
        return i if i < len(nums) and nums[i] == target else -1
```

## 34. 在排序数组中查找元素的第一个和最后一个位置

```Python
class Solution:
    def lower_bound(self, nums: List[int], target: int) -> int:
        left = 0
        right = len(nums) - 1
        while left <= right:
            mid = (left + right) // 2
            if nums[mid] >= target:
                right = mid - 1
            else:
                left = mid + 1
        return left

    def searchRange(self, nums: List[int], target: int) -> List[int]:
        start = self.lower_bound(nums, target)
        # nums 中没有 target
        if start == len(nums) or nums[start] != target:
            return [-1, -1]
        # 如果start存在，那么end必定存在
        end = self.lower_bound(nums, target + 1) - 1
        return [start, end]
```
>问：如何理解 end = lowerBound(nums, target + 1) - 1 这段代码？
>
>答：要想找到 ≤target 的最后一个数，无需单独再写一个二分。我们可以先找到这个数的右边相邻数字，
>    也就是 >target 的第一个数。在所有数都是整数的前提下，>target 等价于 ≥target+1，这样就可
>    以复用我们已经写好的二分函数了，即 lowerBound(nums, target + 1)，算出这个数的下标后，将
>    其减一，就得到 ≤target 的最后一个数的下标。
